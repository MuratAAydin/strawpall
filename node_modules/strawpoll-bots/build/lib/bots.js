"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SocksProxyAgent = require("socks-proxy-agent");
const fs_1 = require("fs");
const querystring_1 = require("querystring");
const getData_1 = require("./getData");
const sendVote_1 = require("./sendVote");
function botPoll(url, option, protection, socksFilePath, amount) {
    if (!url || !url.includes('strawpoll.me'))
        throw new Error('Invalid poll url!');
    if (protection)
        if (!socksFilePath || !fs_1.existsSync(socksFilePath))
            throw new Error('Invalid socks file path!');
    const socks = protection ? fs_1.readFileSync(socksFilePath, 'utf8').trim().split('\n') : null;
    if (protection)
        for (const sock of socks) {
            const agent = new SocksProxyAgent(`socks://${sock}`);
            const id = socks.indexOf(sock);
            getData_1.default(url, agent, protection)
                .then(data => {
                const formData = querystring_1.stringify({
                    'security-token': data.secToken,
                    [data.authToken]: '',
                    options: data.options[option]
                });
                sendVote_1.default(url, agent, formData, id, protection);
            })
                .catch(() => {
                console.log(`[${String(id)}]: Error fetching the poll data!`);
            });
        }
    else
        for (let i = 0; i < amount; i++) {
            const id = i;
            getData_1.default(url, null, protection)
                .then(data => {
                const formData = querystring_1.stringify({
                    'security-token': data.secToken,
                    [data.authToken]: '',
                    options: data.options[option]
                });
                sendVote_1.default(url, null, formData, id, protection);
            })
                .catch(() => {
                console.log(`[${String(id)}]: Error fetching the poll data!`);
            });
        }
}
exports.default = botPoll;
